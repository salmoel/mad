#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('m.a.d:server');
const http = require('http');

const TelegramBot = require('node-telegram-bot-api');
const token = 'YOUR_TOKEN';
// Setup polling way
const bot = new TelegramBot(token, {polling: true});
//
// Matches "/echo [whatever]"
bot.onText(/\/echo (.+)/, (msg, match) => {
  // 'msg' is the received Message from Telegram
  // 'match' is the result of executing the regexp above on the text content
  // of the message
  console.log('msgmsg ::; ', msg)
  const chatId = msg.chat.id;
  // console.log(match);
  const resp = match[1]; // the captured "whatever"

  // send back the matched "whatever" to the chat
  bot.sendMessage(chatId, resp);
});

// Listen for any kind of message. There are different kinds of
// messages.
// bot.on('message', (msg) => {
//   console.log('botMSG ::; ', msg);
//
//   const chatId = msg.chat.id;
//   // console.log('botMSG ::; ', msg);
//
//   // send a message to the chat acknowledging receipt of their message
//   bot.sendMessage(chatId, 'Received your message');
// });
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require('socket.io')(server)
console.log('io.www ::; ', io);

io.on('connection', function(socket){
  console.log('um usuario conectou');
  socket.on('disconnect', function(){
    console.log('usuario desconectou');
  });
  socket.on('chat message', function(msg){
    const chatId = 000000; //YOUR_CHAT_ID
    console.log('message: ' + msg);
    bot.sendMessage(chatId, msg);
  })
    // bot.sendMessage(msg);
    // bot.onText(/\/echo (.+)/, (botMsg, match) => {
    //   // 'botMsg' is the received Message from Telegram
    //   // 'match' is the result of executing the regexp above on the text content
    //   // of the message
    //
    //   const chatId = botMsg.chat.id;
    //   // console.log(match);
    //   const resp = msg; // the captured "whatever"
    //
    //   // send back the matched "whatever" to the chat
    //   bot.sendMessage(chatId, resp);
    // });

    // bot.on('message', (botMsg) => {
    //   // 'botMsg' is the received Message from Telegram
    //   // 'match' is the result of executing the regexp above on the text content
    //   // of the message
    //
    //   const chatId = botMsg.chat.id;
    //   // console.log(match);
    //   const resp = msg; // the captured "whatever"
    //
    //   // send back the matched "whatever" to the chat
    //   bot.sendMessage(chatId, resp);
    // });

    // socket.emit('chat message', msg);
    // msg = 'lol'
  // })

  // socket.on('ferret', function (name, fn) {
  //    fn('woot');
  //  });
  //  socket.emit('woot', 'tobi', function (data) {
  //    bot.on('woot', (msg) => {
  //      console.log('botMSG ::; ', msg);
   //
  //      const chatId = msg.chat.id;
  //      // console.log('botMSG ::; ', msg);
   //
  //      // send a message to the chat acknowledging receipt of their message
  //      bot.sendMessage(chatId, 'Received your message');
  //    });
  //    console.log(data); // data will be 'woot'
  //  });
  // bot.on('chat message', (msg) => {
  //   console.log('botMSG ::; ', msg);
  //   const chatId = msg.chat.id;
  //   console.log('botMSG ::; ', msg);
  //   // send a message to the chat acknowledging receipt of their message
  //   bot.sendMessage(chatId, 'Received your message');
  // });

});
// console.log('io ::; ', io);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  console.log('Listening on ::; ' + bind);
}

// module.exports = ioServer;
